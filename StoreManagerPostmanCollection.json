{
	"info": {
		"_postman_id": "ce6f916e-d598-4529-a04e-9312090af535",
		"name": "StoreManager",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35989682"
	},
	"item": [
		{
			"name": "Registration_Auth_Manage",
			"item": [
				{
					"name": "Registration_Status_Code_201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful registration response\r",
									"pm.test(\"Status code is 201. The registration is successful\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Log the registered email and password for reference\r",
									"const randomEmail = pm.environment.get(\"randomEmail\");\r",
									"console.log(randomEmail);\r",
									"const randomPassword = pm.environment.get(\"randomPassword\");\r",
									"\r",
									"const userId = pm.response.json().user.id;\r",
									"pm.environment.set(\"userID\", userId);\r",
									"\r",
									"console.log(\"UserId: \", pm.environment.get(\"userID\"));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random name (letters and numbers, starts with a capital letter)\r",
									"function getRandomName() {\r",
									"  const characters = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
									"  const letters = \"abcdefghijklmnopqrstuvwxyz\";\r",
									"  const length = Math.floor(Math.random() * (50 - 3 + 1)) + 3; // Random length between 3 and 50\r",
									"  let name = letters.charAt(Math.floor(Math.random() * letters.length)).toUpperCase(); // Start with an uppercase letter\r",
									"\r",
									"  for (let i = 1; i < length; i++) {\r",
									"    name += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"  }\r",
									"\r",
									"  return name;\r",
									"}\r",
									"\r",
									"// Function to generate a random email (letters and numbers)\r",
									"function getRandomEmail() {\r",
									"  const characters = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
									"  const domains = [\"example.com\", \"test.com\", \"email.com\"];\r",
									"  const usernameLength = Math.floor(Math.random() * (20 - 3 + 1)) + 3; // Random length between 3 and 20\r",
									"  let username = \"\";\r",
									"\r",
									"  for (let i = 0; i < usernameLength; i++) {\r",
									"    username += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"  }\r",
									"\r",
									"  const domain = domains[Math.floor(Math.random() * domains.length)];\r",
									"  return `${username}@${domain}`;\r",
									"}\r",
									"\r",
									"// Function to generate a random password (letters, numbers, and special characters)\r",
									"function getRandomPassword() {\r",
									"  const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()\";\r",
									"  const length = Math.floor(Math.random() * (50 - 8 + 1)) + 8; // Random length between 8 and 50\r",
									"  let password = \"\";\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    password += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"\r",
									"// Set the generated values as variables for use in the request\r",
									"pm.environment.set(\"randomName\", getRandomName());\r",
									"pm.environment.set(\"randomEmail\", getRandomEmail());\r",
									"pm.environment.set(\"randomPassword\", getRandomPassword());\r",
									"\r",
									"// Log the generated values for debugging\r",
									"console.log(\"Generated Name:\", pm.environment.get(\"randomName\"));\r",
									"console.log(\"Generated Email:\", pm.environment.get(\"randomEmail\"));\r",
									"console.log(\"Generated Password:\", pm.environment.get(\"randomPassword\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{randomName}}\", // Mandatory. 3-50 characters.\r\n  \"email\": \"{{randomEmail}}\", // Mandatory. Valid, unique, standard email format.\r\n  \"password\": \"{{randomPassword}}\" // Mandatory. At least 8 characters. \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_users}}/register/",
							"host": [
								"{{base_url_users}}"
							],
							"path": [
								"register",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization_Status_Code_200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(\"Email used for login:\", pm.environment.get(\"randomEmail\"));\r",
									"console.log(\"Password used for login:\", pm.environment.get(\"randomPassword\"));\r",
									"\r",
									"// Parse the response body to get the access token\r",
									"const response = pm.response.json();\r",
									"const accessToken = response.access_token;\r",
									"const refresh_token = response.refresh_token;\r",
									"const userID = response.user_id;\r",
									"pm.environment.set (\"User_ID\", userID);\r",
									"\r",
									"// Save the access token as an environment variable\r",
									"if (accessToken) {\r",
									"    pm.environment.set(\"accessToken\", accessToken);\r",
									"    console.log(\"Access Token saved:\", accessToken);\r",
									"      pm.environment.set(\"refresh_token\", refresh_token);\r",
									"    console.log(\"Refresh Token saved:\", refresh_token);\r",
									"} else {\r",
									"    console.log(\"Access Token not found in the response\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{randomPassword}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_users}}/login/",
							"host": [
								"{{base_url_users}}"
							],
							"path": [
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Promoted_Status_Code_200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test (\"Status code 200. The regular user Promoted\", function () {\r",
									"   pm.response.to.have.status(200); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url_users}}/users/promote/844ebf59-5fad-4a28-9b88-2dc6e392d08a",
							"host": [
								"{{base_url_users}}"
							],
							"path": [
								"users",
								"promote",
								"844ebf59-5fad-4a28-9b88-2dc6e392d08a"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test (\"Status code 200. The user data retrieved\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "jwt",
							"jwt": [
								{
									"key": "payload",
									"value": "{\"sub\":\"ee@ee.ee\",\"is_superadmin\":true,\"exp\":1729961400}",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "HS256",
									"type": "string"
								},
								{
									"key": "isSecretBase64Encoded",
									"value": false,
									"type": "boolean"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "queryParamKey",
									"value": "token",
									"type": "string"
								},
								{
									"key": "header",
									"value": "{}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url_users}}/users",
							"host": [
								"{{base_url_users}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit_user_data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random name between 3 and 50 characters\r",
									"function genRandomNewName() {\r",
									"    const characters = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
									"    const length = Math.floor(Math.random() * (50 - 3 + 1)) + 3;\r",
									"    let name_new = \"\";\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        name_new += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return name_new;\r",
									"}\r",
									"\r",
									"// Set a random name\r",
									"pm.environment.set(\"randomNewName\", genRandomNewName());\r",
									"const randomNewName = pm.environment.get(\"randomNewName\");\r",
									"\r",
									"// Generate a random email using the random name\r",
									"const randomNewEmail = `${randomNewName}@example.com`;\r",
									"pm.environment.set(\"randomNewEmail\", randomNewEmail);  \r",
									"\r",
									"console.log(randomNewEmail);\r",
									"console.log (randomNewName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 200. The data has been updated\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(pm.environment.get(\"User_ID\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"111111\",\r\n  \"email\": \"ttttttttttttytytty.yyyyyyyyyyyyyyyyyyyyyyyyyyytttttttttttttttttt@elenachangetest.testttttttt\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_users}}/users/edit/{{User_ID}}",
							"host": [
								"{{base_url_users}}"
							],
							"path": [
								"users",
								"edit",
								"{{User_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_user",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url_users}}/users/delete/{{User_ID}}",
							"host": [
								"{{base_url_users}}"
							],
							"path": [
								"users",
								"delete",
								"{{User_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_user_Status_Code_401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const access_token_invalid = \"c7b00b2c-f1a0-4118-8768-2bce69356d15\";\r",
									"pm.environment.set (\"access_token_invalid\", access_token_invalid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test (\"Status code 401. Invalide token.\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{access_token_invalid}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url_users}}/users/delete/{{User_ID}}",
							"host": [
								"{{base_url_users}}"
							],
							"path": [
								"users",
								"delete",
								"{{User_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "pendingProducts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8001/get-pending-products/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"get-pending-products",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "token",
			"item": [
				{
					"name": "Retrieve Token for Existing User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test (\"Status code 200. OK.\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8001/get-user-token/{{User_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"get-user-token",
								"{{User_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product Management",
			"item": [
				{
					"name": "Create_product",
					"item": [
						{
							"name": "Product_creation_mandatory_fields_Statis_code_201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201. Product was created.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const productId = pm.response.json().product_id;  // Assuming product_id is in the response body\r",
											"pm.environment.set(\"product_id\", productId);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_product}}\", // Mandatory. 3-100 characters. Only letters and numbers.\r\n  \"price\": {{Price_product}}, // Mandatory. Positive number, 2 decimals (e.g., 20.00). Max 10 digits including decimals.\r\n  \"stock_quantity\": {{quantity_product}}, // Mandatory. Whole number, at least 0.\r\n  \"supplier_id\": \"{{supplierID}}\" // Mandatory. Valid UUID. Must match an existing supplier ID in the database.\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/products/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Product_creation_mandatory_fields_Statis_code_201_TEST_DATA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201. Product was created.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const productId = pm.response.json().product_id;  // Assuming product_id is in the response body\r",
											"pm.environment.set(\"product_id\", productId);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_product}}\", // Mandatory. 3-100 characters. Only letters and numbers.\r\n  \"price\": {{Price_product}}, // Mandatory. Positive number, 2 decimals (e.g., 20.00). Max 10 digits including decimals.\r\n  \"stock_quantity\": 0,\r\n  \"supplier_id\": \"{{supplierID}}\" // Mandatory. Valid UUID. Must match an existing supplier ID in the database.\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/products/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Product_creation_opt&mand_fields Copy_201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201. The product was created.\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const productId = pm.response.json().product_id;  // Assuming product_id is in the response body\r",
											"pm.environment.set(\"product_id\", productId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_product}}\", // Mandatory. 3-100 characters. Only letters and numbers.\r\n  \"description\": \"{{description_product}}\", // Optional. Up to 500 characters. No restrictions on symbols.\r\n  \"category\": \"{{category_product}}\", // Optional. Up to 50 characters. Only letters and numbers.\r\n  \"price\": \"200.222\", // Mandatory. Positive number, 2 decimals (e.g., 20.00). Max 10 digits including decimals.\r\n  \"stock_quantity\": {{quantity_product}}, // Mandatory. Whole number, at least 0.\r\n  \"supplier_id\": \"{{supplierID}}\", // Mandatory. Valid UUID. Must match an existing supplier ID in the database.\r\n  \"image_url\": \"{{url_product}}\", // Optional. Max 255 characters. Formats: png, jpeg, jpg. Stored as a URL.\r\n  \"weight\": \"tr\", // Optional. Positive number with a decimal point. Max 6 digits (2 decimals).\r\n  \"dimensions\": \"{{dimensions_product}}\", // Optional. Max 100 characters. Whole numbers and the symbol \"x\" allowed.\r\n  \"manufacturer\": \"{{manufacturer_product}}\" // Optional. Max 100 characters. Only letters and numbers.\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_products}}/products/",
									"host": [
										"{{base_url_products}}"
									],
									"path": [
										"products",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"function getRandomName () {\r",
									"    const characters = \"qazwsxedcrfvtgbyhnujmikolp1234567890\";\r",
									"    const letters = \"qazwsxedcrfvtgbyhnujmikolp\";\r",
									"    const lenght = Math.floor((100 - 3 + 1) * Math.random()) + 3;\r",
									"    let name_product = \"\";\r",
									"\r",
									"    name_product += letters.charAt(Math.floor(Math.random()*letters.length)).toUpperCase();\r",
									"\r",
									"    for (let i = 1; i < lenght; i++){\r",
									"        name_product += characters.charAt(Math.floor(Math.random() * characters.length));        \r",
									"    }\r",
									"    return name_product;\r",
									"}\r",
									"\r",
									"function getDescriptions () {\r",
									"    const symbols = () => String.fromCharCode(Math.floor(Math.random() * (126 - 33 + 1)) + 33);\r",
									"    const length = Math.floor(Math.random () * (500 - 1 + 1)) + 1;\r",
									"    let description_product = \"\";\r",
									"    for (let i = 0; i < length; i++){\r",
									"        description_product += symbols();\r",
									"    }\r",
									"    return description_product = description_product.replace(/[\"\\\\{}[\\],:<>|/'^~`=()&]/g, \"\");\r",
									"}\r",
									"\r",
									"function getCategory () {\r",
									"    const length = Math.floor(Math.random() * (50 - 1 + 1)) + 1;\r",
									"    const symbols = \"qazwsxedcrfvtgbyhnujikmolp1234567890\";\r",
									"    let category_product = \"\";\r",
									"    for (let i =0; i < length; i++){\r",
									"        category_product += symbols.charAt(Math.floor (Math.random() * symbols.length));    \r",
									"    }\r",
									"    return category_product;\r",
									"}\r",
									"\r",
									"function getPrice () {\r",
									"    const length = Math.floor(Math.random() * (6 - 1 + 1))+1;\r",
									"    const length2 = 2;\r",
									"    const numbers = \"0123456789\";\r",
									"    let Price_product = \"\";\r",
									"    let Price_product2 = \"\";\r",
									"     // Create the integer part (before the decimal point)\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        // To avoid leading zeros, the first digit is from 1-9\r",
									"        if (i === 0) {\r",
									"            Price_product += numbers.charAt(Math.floor(Math.random() * 9) + 1); // Random from 1-9\r",
									"        } else {\r",
									"            Price_product += numbers.charAt(Math.floor(Math.random() * numbers.length)); // Random from 0-9\r",
									"        }\r",
									"    }\r",
									"     for (let k=0; k < length2; k++) {\r",
									"        Price_product2 += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
									"    }\r",
									"    return Price_product + '.' + Price_product2;\r",
									"}\r",
									"\r",
									"function getQuantity() {\r",
									"    const length = Math.floor(Math.random() * (6 - 1 + 1)) + 1; // Random length between 1 and 10\r",
									"    const numbers = \"0123456789\";\r",
									"    let quantity_product = \"\";\r",
									"\r",
									"    // If length is greater than 1, ensure the first digit is not '0'\r",
									"    if (length === 1) {\r",
									"        // For length 1, any digit is fine, including '0'\r",
									"        quantity_product += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
									"    } else {\r",
									"        // For length > 1, the first digit must not be '0'\r",
									"        quantity_product += numbers.charAt(Math.floor(Math.random() * 9) + 1); // Random from 1-9\r",
									"\r",
									"        // Add subsequent digits which can be any from 0-9\r",
									"        for (let i = 1; i < length; i++) {\r",
									"            quantity_product += numbers.charAt(Math.floor(Math.random() * numbers.length)); // Random from 0-9\r",
									"        }\r",
									"    }\r",
									"\r",
									"    return quantity_product;\r",
									"}\r",
									"\r",
									"function GetUrlProduct () {\r",
									"    const maxLength = 255;\r",
									"    const BaseUrl = \"https://example.com/\";\r",
									"    const extensions = [\"png\", \"jpeg\", \"jpg\"];\r",
									"    const characters = \"zaqxswcdevfrbgtnhymjukilopZAQXSWCDEVFRBGTNHYMJUKILOP0123456789\";\r",
									"\r",
									"    const filenamelength = Math.floor (Math.random() * (maxLength - BaseUrl.length - 5)) + 1;\r",
									"\r",
									"    let filename = \"\";\r",
									"\r",
									"    for (let i=0; i < filenamelength; i++) {\r",
									"        filename += characters.charAt(Math.floor (Math.random() * characters.length));\r",
									"    }\r",
									"\r",
									"    const extension = extensions[Math.floor(Math.random() * extensions.length)];\r",
									"\r",
									"    const url_product = `${BaseUrl}${filename}.${extension}`;\r",
									"\r",
									"    if (url_product.length > maxLength) {\r",
									"        return GetUrlProduct();\r",
									"    }\r",
									"    return url_product;\r",
									"}\r",
									"\r",
									"function getWeigth () {\r",
									"    const length = Math.floor(Math.random() * (4 - 1 + 1))+1;\r",
									"    const length2 = 2;\r",
									"    const numbers = \"123456789\";\r",
									"    const numbers2 = \"0123456789\";\r",
									"    let Weigth_product = \"\";\r",
									"    let Weigth_product2 = \"\";\r",
									"     \r",
									"     // Create the integer part (before the decimal point)\r",
									"    for (let i = 0; i < length; i++) {\r",
									"  \r",
									"            Weigth_product += numbers.charAt(Math.floor(Math.random() * numbers.length)); // Random from 1-9\r",
									"        \r",
									"    }\r",
									"     for (let k=0; k < length2; k++) {\r",
									"        Weigth_product2 += numbers2.charAt(Math.floor(Math.random() * numbers2.length));\r",
									"    }\r",
									"    return Weigth_product + '.' + Weigth_product2;\r",
									"}\r",
									"\r",
									"function getDimensions() {\r",
									"    const numbers = \"123456789\"; // Avoid leading zero\r",
									"    const allNumbers = \"0123456789\";\r",
									"\r",
									"    // Ensure three non-zero lengths\r",
									"    let length1 = Math.floor(Math.random() * 3) + 1; // At least 1 digit\r",
									"    let length2 = Math.floor(Math.random() * 3) + 1; \r",
									"    let length3 = Math.floor(Math.random() * 3) + 1;\r",
									"\r",
									"    let part1 = numbers.charAt(Math.floor(Math.random() * numbers.length)); // First digit non-zero\r",
									"    for (let i = 1; i < length1; i++) {\r",
									"        part1 += allNumbers.charAt(Math.floor(Math.random() * allNumbers.length));\r",
									"    }\r",
									"\r",
									"    let part2 = numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
									"    for (let i = 1; i < length2; i++) {\r",
									"        part2 += allNumbers.charAt(Math.floor(Math.random() * allNumbers.length));\r",
									"    }\r",
									"\r",
									"    let part3 = numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
									"    for (let i = 1; i < length3; i++) {\r",
									"        part3 += allNumbers.charAt(Math.floor(Math.random() * allNumbers.length));\r",
									"    }\r",
									"\r",
									"    return `${part1}x${part2}x${part3}`;\r",
									"}\r",
									"\r",
									"function getManufacturer () {\r",
									"    const length = Math.floor(Math.random() * (100)) + 1;\r",
									"    const characters = \"qazwsxedcrfvtgbyhnujikmolp1234567890\";\r",
									"    let manufacturer_product = \"\";\r",
									"    for (let i =0; i < length; i++){\r",
									"        manufacturer_product += characters.charAt(Math.floor (Math.random() * characters.length));    \r",
									"    }\r",
									"    return manufacturer_product;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"name_product\", getRandomName());\r",
									"const name_product = pm.environment.get (\"name_product\");\r",
									"\r",
									"pm.environment.set(\"description_product\", getDescriptions());\r",
									"const description = pm.environment.get (\"description_product\");\r",
									"\r",
									"pm.environment.set(\"category_product\", getCategory());\r",
									"const category_product = pm.environment.get (\"category_product\");\r",
									"\r",
									"pm.environment.set(\"Price_product\", getPrice());\r",
									"const Price_product = pm.environment.get (\"Price_product\");\r",
									"\r",
									"pm.environment.set(\"quantity_product\", getQuantity());\r",
									"const quantity_product = pm.environment.get (\"quantity_product\");\r",
									"\r",
									"pm.environment.set(\"url_product\", GetUrlProduct());\r",
									"const url_product = pm.environment.get (\"url_product\");\r",
									"\r",
									"pm.environment.set(\"Weigth_product\", getWeigth());\r",
									"const Weigth_product = pm.environment.get (\"Weigth_product\");\r",
									"\r",
									"pm.environment.set(\"dimensions_product\", getDimensions());\r",
									"const dimensions_product = pm.environment.get (\"dimensions_product\");\r",
									"\r",
									"pm.environment.set(\"manufacturer_product\", getManufacturer());\r",
									"const manufacturer_product = pm.environment.get (\"manufacturer_product\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Retrieve_products",
					"item": [
						{
							"name": "Retrieving_all_Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200. The products was retrieved.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const productId = pm.response.json().product_id;  // Assuming product_id is in the response body\r",
											"pm.environment.set(\"product_id\", productId);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url_products}}/products/",
									"host": [
										"{{base_url_products}}"
									],
									"path": [
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving_product_by_name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200. The product by name was retrieved.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const productId = pm.response.json().product_id;  // Assuming product_id is in the response body\r",
											"pm.environment.set(\"product_id\", productId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url_products}}/search_products/?name={{name_product}}",
									"host": [
										"{{base_url_products}}"
									],
									"path": [
										"search_products",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{name_product}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving_Product_by_ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200. The product by ID was retrieved.\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const productId = pm.response.json().product_id;  // Assuming product_id is in the response body\r",
											"pm.environment.set(\"product_id\", productId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8002/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving_Product_by_ID 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404. The product not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const productId = pm.response.json().product_id;  // Assuming product_id is in the response body\r",
											"pm.environment.set(\"product_id\", productId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8002/products/be53c59f-c7c7-434f-a8e9-960adc208419",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"be53c59f-c7c7-434f-a8e9-960adc208419"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving_Product_by_ID 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Invalid product_id. Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8002/products/null",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"null"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving_Product_by_ID 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test (\"Invalid token or unauthorized access. Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0Njg3ZDRhOC0wNmU5LTRmNzMtYjdkMy1lMzgwMjc4NDhmODgiLCJpc19zdXBlcmFkbWluIjpmYWxzZSwiZXhwIjoxNzMxMzM3MDEyfQ.h02FAUz4WIx46pxrvQJWI0NJmO0ZpTfacLsEWH24BA8",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8002/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update_product",
					"item": [
						{
							"name": "Product Update with empty optional fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function getNewRandomName() {\r",
											"    const characters = \"qazwsxedcrfvtgbyhnujmikolp1234567890\";\r",
											"    const lenght = Math.floor((100 - 3 + 1) * Math.random()) + 3;\r",
											"    let New_name_product = \"\";\r",
											"    for (let i = 0; i < lenght; i++) {\r",
											"        New_name_product += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return New_name_product.charAt(0).toUpperCase() + New_name_product.slice(1);\r",
											"}\r",
											"\r",
											"function getNewDescriptions() {\r",
											"    const symbols = () => String.fromCharCode(Math.floor(Math.random() * (126 - 33 + 1)) + 33);\r",
											"    const length = Math.floor(Math.random() * (500 - 1 + 1)) + 1;\r",
											"    let New_description_product = \"\";\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        New_description_product += symbols();\r",
											"    }\r",
											"    return New_description_product.replace(/[\"\\\\{}[\\],:<>|/'^~`=()&]/g, \"\");\r",
											"}\r",
											"\r",
											"function getNewCategory() {\r",
											"    const length = Math.floor(Math.random() * (50 - 1 + 1)) + 1;\r",
											"    const symbols = \"qazwsxedcrfvtgbyhnujikmolp1234567890\";\r",
											"    let New_category_product = \"\";\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        New_category_product += symbols.charAt(Math.floor(Math.random() * symbols.length));\r",
											"    }\r",
											"    return New_category_product;\r",
											"}\r",
											"\r",
											"function getNewPrice() {\r",
											"    const length = Math.floor(Math.random() * (6 - 1 + 1)) + 1;\r",
											"    const length2 = 2;\r",
											"    const numbers = \"0123456789\";\r",
											"    let New_Price_product = \"\";\r",
											"    let New_Price_product2 = \"\";\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        if (i === 0) {\r",
											"            New_Price_product += numbers.charAt(Math.floor(Math.random() * 9) + 1);\r",
											"        } else {\r",
											"            New_Price_product += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"        }\r",
											"    }\r",
											"    for (let k = 0; k < length2; k++) {\r",
											"        New_Price_product2 += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    }\r",
											"    return New_Price_product + '.' + New_Price_product2;\r",
											"}\r",
											"\r",
											"function getNewQuantity() {\r",
											"    const length = Math.floor(Math.random() * (6 - 1 + 1)) + 1;\r",
											"    const numbers = \"0123456789\";\r",
											"    let New_quantity_product = \"\";\r",
											"    if (length === 1) {\r",
											"        New_quantity_product += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    } else {\r",
											"        New_quantity_product += numbers.charAt(Math.floor(Math.random() * 9) + 1);\r",
											"        for (let i = 1; i < length; i++) {\r",
											"            New_quantity_product += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"        }\r",
											"    }\r",
											"    return New_quantity_product;\r",
											"}\r",
											"\r",
											"function getNewUrlProduct() {\r",
											"    const maxLength = 255;\r",
											"    const BaseUrl = \"https://example.com/\";\r",
											"    const extensions = [\"png\", \"jpeg\", \"jpg\"];\r",
											"    const characters = \"zaqxswcdevfrbgtnhymjukilopZAQXSWCDEVFRBGTNHYMJUKILOP0123456789\";\r",
											"    const filenamelength = Math.floor(Math.random() * (maxLength - BaseUrl.length - 5)) + 1;\r",
											"    let New_filename = \"\";\r",
											"    for (let i = 0; i < filenamelength; i++) {\r",
											"        New_filename += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    const extension = extensions[Math.floor(Math.random() * extensions.length)];\r",
											"    const New_url_product = `${BaseUrl}${New_filename}.${extension}`;\r",
											"    if (New_url_product.length > maxLength) {\r",
											"        return getNewUrlProduct();\r",
											"    }\r",
											"    return New_url_product;\r",
											"}\r",
											"\r",
											"function getNewWeigth() {\r",
											"    const length = Math.floor(Math.random() * (4 - 1 + 1)) + 1;\r",
											"    const length2 = 2;\r",
											"    const numbers = \"123456789\";\r",
											"    const numbers2 = \"0123456789\";\r",
											"    let New_Weigth_product = \"\";\r",
											"    let New_Weigth_product2 = \"\";\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        New_Weigth_product += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    }\r",
											"    for (let k = 0; k < length2; k++) {\r",
											"        New_Weigth_product2 += numbers2.charAt(Math.floor(Math.random() * numbers2.length));\r",
											"    }\r",
											"    return New_Weigth_product + '.' + New_Weigth_product2;\r",
											"}\r",
											"\r",
											"function getNewDimensions() {\r",
											"    const length1 = Math.floor(Math.random() * (96)) + 1;\r",
											"    const length2 = Math.floor(Math.random() * (100 - length1 - 2)) + 1;\r",
											"    const lenght3 = 100 - length1 - length2 - 2;\r",
											"    const numbers = \"0123456789\";\r",
											"    let New_part1 = \"\";\r",
											"    let New_part2 = \"\";\r",
											"    let New_part3 = \"\";\r",
											"    for (let i = 0; i < length1; i++) {\r",
											"        New_part1 += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    }\r",
											"    if (New_part1[0] === 0 && length1 > 1) {\r",
											"        New_part1 = New_part1.replace('0', Math.floor(Math.random() * 9) + 1);\r",
											"    }\r",
											"    for (let i = 0; i < length2; i++) {\r",
											"        New_part2 += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    }\r",
											"    if (New_part2[0] === 0 && length2 > 1) {\r",
											"        New_part2 = New_part2.replace('0', Math.floor(Math.random() * 9) + 1);\r",
											"    }\r",
											"    for (let i = 0; i < lenght3; i++) {\r",
											"        New_part3 += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
											"    }\r",
											"    if (New_part3[0] === 0 && lenght3 > 1) {\r",
											"        New_part3 = New_part3.replace('0', Math.floor(Math.random() * 9) + 1);\r",
											"    }\r",
											"    return New_part1 + 'x' + New_part2 + 'x' + New_part3;\r",
											"}\r",
											"\r",
											"function getNewManufacturer() {\r",
											"    const length = Math.floor(Math.random() * (100)) + 1;\r",
											"    const characters = \"qazwsxedcrfvtgbyhnujikmolp1234567890\";\r",
											"    let New_manufacturer_product = \"\";\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        New_manufacturer_product += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return New_manufacturer_product;\r",
											"}\r",
											"\r",
											"pm.environment.set(\"New_name_product\", getNewRandomName());\r",
											"const New_name_product = pm.environment.get(\"New_name_product\");\r",
											"console.log(New_name_product);\r",
											"\r",
											"pm.environment.set(\"New_description_product\", getNewDescriptions());\r",
											"const New_description = pm.environment.get(\"New_description_product\");\r",
											"console.log(New_description);\r",
											"\r",
											"pm.environment.set(\"New_category_product\", getNewCategory());\r",
											"const New_category_product = pm.environment.get(\"New_category_product\");\r",
											"\r",
											"pm.environment.set(\"New_Price_product\", getNewPrice());\r",
											"const New_Price_product = pm.environment.get(\"New_Price_product\");\r",
											"\r",
											"pm.environment.set(\"New_quantity_product\", getNewQuantity());\r",
											"const New_quantity_product = pm.environment.get(\"New_quantity_product\");\r",
											"\r",
											"pm.environment.set(\"New_url_product\", getNewUrlProduct());\r",
											"const New_url_product = pm.environment.get(\"New_url_product\");\r",
											"\r",
											"pm.environment.set(\"New_Weigth_product\", getNewWeigth());\r",
											"const New_Weigth_product = pm.environment.get(\"New_Weigth_product\");\r",
											"\r",
											"pm.environment.set(\"New_dimensions_product\", getNewDimensions());\r",
											"const New_dimensions_product = pm.environment.get(\"New_dimensions_product\");\r",
											"\r",
											"pm.environment.set(\"New_manufacturer_product\", getNewManufacturer());\r",
											"const New_Newmanufacturer_product = pm.environment.get(\"New_manufacturer_product\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Status code is 200 OK!\", function () {\r",
											"    pm.response.to.have (200);\r",
											"});\r",
											"\r",
											"const name_product = pm.environment.get (\"name_product\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{New_name_product}}\",\r\n  \"description\": \"{{New_description_product}}\",\r\n  \"category\": \"{{New_category_product}}\",\r\n  \"price\": {{New_Price_product}},\r\n  \"stock_quantity\": {{New_quantity_product}},\r\n  \"supplier_id\": \"{{supplierID}}\",\r\n  \"image_url\": \"{{New_url_product}}\",\r\n  \"weight\": \"{{New_Weigth_product}}\",\r\n  \"dimensions\": \"{{New_dimensions_product}}\",\r\n  \"manufacturer\": \"{{New_manufacturer_product}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_products}}/products/{{product_id}}",
									"host": [
										"{{base_url_products}}"
									],
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Update with mandatory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_product}}\",\r\n  \"price\": 50.26,\r\n  \"stock_quantity\": {{quantity_product}},\r\n  \"supplier_id\": \"{{supplierID}}\"  \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Update with empty body request",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"test\",\r\n  \"description\": \"This is a description., A product description that fits within the 500 character limit. This description will be expanded to exactly 500 characters by adding additional filler text here. The aim is to reach the limit without going over, which will allow this description to be valid. This should now be exactly 500 characters long and fully comply with the constraints of the system. Let's keep going until we hit exactly 500. Done! This is exactly 500 characters now %, A product description that fi\",\r\n  \"category\": \"TEST\",\r\n  \"price\": 99.10,\r\n  \"stock_quantity\": 1,\r\n  \"supplier_id\": \"06a4e337-a7da-4e6b-b350-2eb7f6687237\",\r\n  \"image_url\": \"https://example.com/image.jpg\",\r\n  \"weight\": 100.00,\r\n \r\n  \"manufacturer\": \"111rr11111\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Update with missed mandatory filed",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"test\",\r\n  \"description\": \"This is a description., A product description that fits within the 500 character limit. This description will be expanded to exactly 500 characters by adding additional filler text here. The aim is to reach the limit without going over, which will allow this description to be valid. This should now be exactly 500 characters long and fully comply with the constraints of the system. Let's keep going until we hit exactly 500. Done! This is exactly 500 characters now %, A product description that fi\",\r\n  \"category\": \"TEST\",\r\n  \"price\": 99.10,\r\n  \"stock_quantity\": 1,\r\n  \"supplier_id\": \"6cc42bc9-b8b7-4a1d-8535-2ba4af779a4d\",\r\n  \"image_url\": \"https://example.com/image.jpg\",\r\n  \"weight\": 100.00,\r\n  \"dimensions\": \"12345678901234567890123456789012345678902345678901234567890x1234567890123456789012345678901234567890\",\r\n  \"manufacturer\": \"111rr11111\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Update with product_id doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404. The product not found.\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"test\",\r\n  \"description\": \"This is a description., A product description that fits within the 500 character limit. This description will be expanded to exactly 500 characters by adding additional filler text here. The aim is to reach the limit without going over, which will allow this description to be valid. This should now be exactly 500 characters long and fully comply with the constraints of the system. Let's keep going until we hit exactly 500. Done! This is exactly 500 characters now %, A product description that fi\",\r\n  \"category\": \"TEST\",\r\n  \"price\": 99.10,\r\n  \"stock_quantity\": 1,\r\n  \"supplier_id\": \"6cc42bc9-b8b7-4a1d-8535-2ba4af779a4d\",\r\n  \"image_url\": \"https://example.com/image.jpg\",\r\n  \"weight\": 100.00,\r\n  \"dimensions\": \"12345678901234567890123456789012345678902345678901234567890x1234567890123456789012345678901234567890\",\r\n  \"manufacturer\": \"111rr11111\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Update with No valid Authorization token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Invalid token or unauthorized access. Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"test\",\r\n  \"description\": \"This is a description., A product description that fits within the 500 character limit. This description will be expanded to exactly 500 characters by adding additional filler text here. The aim is to reach the limit without going over, which will allow this description to be valid. This should now be exactly 500 characters long and fully comply with the constraints of the system. Let's keep going until we hit exactly 500. Done! This is exactly 500 characters now %, A product description that fi\",\r\n  \"category\": \"TEST\",\r\n  \"price\": 99.10,\r\n  \"stock_quantity\": 1,\r\n  \"supplier_id\": \"6cc42bc9-b8b7-4a1d-8535-2ba4af779a4d\",\r\n  \"image_url\": \"https://example.com/image.jpg\",\r\n  \"weight\": 100.00,\r\n  \"dimensions\": \"12345678901234567890123456789012345678902345678901234567890x1234567890123456789012345678901234567890\",\r\n  \"manufacturer\": \"111rr11111\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "is_available",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"is_available\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url_products}}/products/{{product_id}}",
									"host": [
										"{{base_url_products}}"
									],
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_product",
					"item": [
						{
							"name": "Delete_product_200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Status code is 200. The product was deleted.\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8002/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"{{product_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_product_401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Status cide is 401. Invalid token or unauthorized access.\", function() {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmYWY2Nzk3NC0zNTUyLTQwOGUtODVlMi02ZWVlNTFkOWUxMzYiLCJpc19zdXBlcmFkbWluIjpmYWxzZSwiZXhwIjoxNzM3NzE5MzA1fQ.alooTAOt-oYATMSSWbCPX59NPK7lccIZqpjE_DT5Jbw",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8002/products/{{product_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"{{product_id}}"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_product_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Status code is 404. The product not found.\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8002/products/739d5fdd-82fc-45c9-a2d2-f832c2b4c00e",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"products",
										"739d5fdd-82fc-45c9-a2d2-f832c2b4c00e"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "WareHouses",
					"item": [
						{
							"name": "Create_Warehous",
							"item": [
								{
									"name": "WEREHOUSE_Creation_all_fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"The warehouse was created. Status cide 200\", function(){\r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"});\r",
													"\r",
													"const warehouseId = pm.response.json().warehouse_id;\r",
													"\r",
													"pm.environment.set (\"warehouseId\", warehouseId);\r",
													"\r",
													"console.log (\"warehouse_id: \", warehouseId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"location\": \"{{location}}\",\r\n  // Warehouse Location:\r\n  // - Required field\r\n  // - Maximum length: 255 characters\r\n  // - No restrictions on input values\r\n  // - Must be unique (duplicate locations return a 422 error)\r\n\r\n  \"manager_name\": \"{{manager_name}}\",\r\n  // Warehouse Manager Name:\r\n  // - Optional field\r\n  // - Maximum length: 100 characters\r\n  // - Can contain only letters\r\n\r\n  \"capacity\": {{capacity}},\r\n  // Warehouse Capacity:\r\n  // - Required field\r\n  // - Must be a positive number representing the maximum volume in cubic meters\r\n\r\n  \"current_stock\": {{current_stock}},\r\n  // Current Stock:\r\n  // - Auto-filled with a default value of 0\r\n  // - Must be a whole number, not less than 0, representing the count of product items in the warehouse\r\n\r\n  \"contact_number\": \"{{contact_number}}\",\r\n  // Warehouse Contact Number:\r\n  // - Optional field\r\n  // - Maximum length: 15 characters\r\n  // - Can contain only digits and the \"+\" sign\r\n\r\n  \"email\": \"{{email}}\",\r\n  // Warehouse Contact Email:\r\n  // - Optional field\r\n  // - Maximum length: 255 characters\r\n  // - Must be in a valid email format\r\n\r\n  \"is_active\": {{is_active}},\r\n  // Warehouse Active Status:\r\n  // - Required field\r\n  // - Boolean value (true/false)\r\n\r\n  \"area_size\": {{area_size}}\r\n  // Warehouse Area Size:\r\n  // - Optional field\r\n  // - Floating-point number\r\n  // - Maximum value: 1,000,000.00\r\n  // - Must be a positive number representing the warehouse area in square meters\r\n  // - Input format: e.g., 1.25\r\n  //SHOULD BE CLARIFIED!!! Decimal input should have no more than 7 digits in total???\r\n  //\"Decimal input should have no more than 5 digits before the decimal point????\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "WEREHOUSE_Creation_all_fields for TEST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"The warehouse was created. Status cide 200\", function(){\r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"});\r",
													"\r",
													"const warehouseId = pm.response.json().warehouse_id;\r",
													"\r",
													"pm.environment.set (\"warehouseId\", warehouseId);\r",
													"\r",
													"console.log (\"warehouse_id: \", warehouseId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"location\": \"{{location}}\",\r\n  // Warehouse Location:\r\n  // - Required field\r\n  // - Maximum length: 255 characters\r\n  // - No restrictions on input values\r\n  // - Must be unique (duplicate locations return a 422 error)\r\n\r\n  \"manager_name\": \"{{manager_name}}\",\r\n  // Warehouse Manager Name:\r\n  // - Optional field\r\n  // - Maximum length: 100 characters\r\n  // - Can contain only letters\r\n\r\n  \"capacity\": \"{{capacity}}\",\r\n  // Warehouse Capacity:\r\n  // - Required field\r\n  // - Must be a positive number representing the maximum volume in cubic meters\r\n  // - Input should be greater than 0\r\n\r\n  \"current_stock\": \"{{current_stock}}\",\r\n  // Current Stock:\r\n  // - Auto-filled with a default value of 0\r\n  // - Must be a whole number, not less than 0, representing the count of product items in the warehouse\r\n\r\n  \"contact_number\": \"{{contact_number}}\",\r\n  // Warehouse Contact Number:\r\n  // - Optional field\r\n  // - Maximum length: 15 characters\r\n  // - Can contain only digits and the \"+\" sign\r\n\r\n  \"email\": \"{{email}} \",\r\n  // Warehouse Contact Email:\r\n  // - Optional field\r\n  // - Maximum length: 255 characters\r\n  // - Must be in a valid email format\r\n\r\n  \"is_active\": \"{{is_active}}\",\r\n  // Warehouse Active Status:\r\n  // - Required field\r\n  // - Boolean value (true/false)\r\n\r\n  \"area_size\": {{area_size}}\r\n  // Warehouse Area Size:\r\n  // - Optional field\r\n  // - Floating-point number\r\n  // - Maximum value: 1,000,000.00\r\n  // - Must be a positive number representing the warehouse area in square meters\r\n  // - Input format: e.g., 1.25\r\n  //SHOULD BE CLARIFIED!!! Decimal input should have no more than 7 digits in total???\r\n  //\"Decimal input should have no more than 5 digits before the decimal point????\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Warehouse_creation_mandatory_fileds",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"The warehouse was created. Status cide 200\", function(){\r",
													"    pm.response.to.have.status(200)\r",
													"\r",
													"});\r",
													"\r",
													"const warehouseId = pm.response.json().warehouse_id;\r",
													"\r",
													"pm.environment.set (\"warehouseId\", warehouseId);\r",
													"\r",
													"console.log (\"warehouse_id: \", warehouseId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"location\": \"{{location}}\",\r\n  // Warehouse Location:\r\n  // - Required field\r\n  // - Maximum length: 255 characters\r\n  // - No restrictions on input values\r\n  // - Must be unique (duplicate locations return a 422 error)\r\n\r\n  \"capacity\": {{capacity}},\r\n  // Warehouse Capacity:\r\n  // - Required field\r\n  // - Must be a positive number representing the maximum volume in cubic meters\r\n\r\n  \"current_stock\": 10,\r\n  // Current Stock:\r\n  // - Auto-filled with a default value of 0\r\n  // - Must be a whole number, not less than 0, representing the count of product items in the warehouse\r\n\r\n\r\n  \"is_active\": {{is_active}}\r\n  // Warehouse Active Status:\r\n  // - Required field\r\n  // - Boolean value (true/false)\r\n\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Warehouses retrieval",
							"item": [
								{
									"name": "Retrieving_warehouse_by_ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"successful - 200\", function() {\r",
													"    pm.response.to.have.status(200)\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/warehouses/{{warehouseId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"{{warehouseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving_all_warehouses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"successful - 200\", function() {\r",
													"    pm.response.to.have.status(200)\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/warehouses/",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving_warehouse_404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Not found - 404\", function() {\r",
													"    pm.response.to.have.status(404)\r",
													"\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/warehouses/b88309ac-8a3e-4e77-92a5-63e66c8412b0",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"b88309ac-8a3e-4e77-92a5-63e66c8412b0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving_warehouse_403",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Not authenticated - 403\", function() {\r",
													"    pm.response.to.have.status(403)\r",
													"\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/warehouses/{{warehouseId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"{{warehouseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving_warehouse_401",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Unauthorized - 401\", function() {\r",
													"    pm.response.to.have.status(401)\r",
													"\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmZGVkZTEyMC02NDk0LTQ5YWEtYjc5Ni04NmFmYWI5NTU1YjkiLCJpc19zdXBlcmFkbWluIjpmYWxzZCwiZXhwIjoxNzQxMzUwMjYzfQ.hfv1KtWhvhtOY1cnthR75Q4eORq6LhIU5aG8hwjD_",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/warehouses/",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Products_warehouse",
							"item": [
								{
									"name": "ADD_Product_to_Warehouse",
									"item": [
										{
											"name": "Add_Products_on_wh",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Added product - 200\", function(){\r",
															"    pm.response.to.have.status(200)\r",
															"})\r",
															"\r",
															"const product_warehouse_id = pm.response.json().product_warehouse_id;\r",
															"pm.environment.set(\"product_warehouse_id\", product_warehouse_id);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses?warehouse_id={{warehouseId}}&product_id={{product_id}}&quantity=1",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses"
													],
													"query": [
														{
															"key": "warehouse_id",
															"value": "{{warehouseId}}"
														},
														{
															"key": "product_id",
															"value": "{{product_id}}"
														},
														{
															"key": "quantity",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add_Products_invalide_WH_ID_422",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Invalide UUID - 422\", function(){\r",
															"    pm.response.to.have.status(422)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses?warehouse_id=b88309ac-8a3e-4e77-92a5-63e66c8412b&product_id={{product_id}}&quantity={{quantity_product}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses"
													],
													"query": [
														{
															"key": "warehouse_id",
															"value": "b88309ac-8a3e-4e77-92a5-63e66c8412b"
														},
														{
															"key": "product_id",
															"value": "{{product_id}}"
														},
														{
															"key": "quantity",
															"value": "{{quantity_product}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add_Products_invalid_quantity",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Invalide UUID - 422\", function(){\r",
															"    pm.response.to.have.status(422)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses?warehouse_id={{warehouseId}}&product_id={{product_id}}&quantity={{quantity_product}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses"
													],
													"query": [
														{
															"key": "warehouse_id",
															"value": "{{warehouseId}}"
														},
														{
															"key": "product_id",
															"value": "{{product_id}}"
														},
														{
															"key": "quantity",
															"value": "{{quantity_product}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add_Products_invalide_PR_ID_422",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Invalide UUID for Product\", function(){\r",
															"    pm.response.to.have.status(422)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses?warehouse_id={{warehouseId}}&product_id=5c747244-6ac4-4172-a688-ae49f2b8d7&quantity={{quantity_product}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses"
													],
													"query": [
														{
															"key": "warehouse_id",
															"value": "{{warehouseId}}"
														},
														{
															"key": "product_id",
															"value": "5c747244-6ac4-4172-a688-ae49f2b8d7"
														},
														{
															"key": "quantity",
															"value": "{{quantity_product}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add_Products_on_wh_401",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Unathorized - 401\", function() {\r",
															"    pm.response.to.have.status(401)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMzdiMTU5Zi1lODc1LTRhm2UtYWMyMC0zMWRmMTA1N2IzMTIiLCJpc19zdXBlcmFkbWluIjp0cnVlLCJleHAiOjE3NDEzNjM3MzB9.DFIAbOU0Fpbd7UHbeUBPLNT0WUBxv4-bB2Bqq8jqNME",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses?warehouse_id={{warehouseId}}&product_id={{product_id}}&quantity={{quantity_product}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses"
													],
													"query": [
														{
															"key": "warehouse_id",
															"value": "{{warehouseId}}"
														},
														{
															"key": "product_id",
															"value": "{{product_id}}"
														},
														{
															"key": "quantity",
															"value": "{{quantity_product}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add_Products_non_existing_WH_404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Non existing Warehouse - 404\", function() {\r",
															"    pm.response.to.have.status(404)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses?warehouse_id=b88309ac-8a3e-4e77-92a5-63e66c8412b2&product_id={{product_id}}&quantity={{quantity_product}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses"
													],
													"query": [
														{
															"key": "warehouse_id",
															"value": "b88309ac-8a3e-4e77-92a5-63e66c8412b2"
														},
														{
															"key": "product_id",
															"value": "{{product_id}}"
														},
														{
															"key": "quantity",
															"value": "{{quantity_product}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Add_Products_non_existing_PR_404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Non existing Product - 404\", function() {\r",
															"    pm.response.to.have.status(404)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses?warehouse_id={{warehouseId}}&product_id=5c747244-6ac4-4172-a688-ae49f2b8d720&quantity={{quantity_product}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses"
													],
													"query": [
														{
															"key": "warehouse_id",
															"value": "{{warehouseId}}"
														},
														{
															"key": "product_id",
															"value": "5c747244-6ac4-4172-a688-ae49f2b8d720"
														},
														{
															"key": "quantity",
															"value": "{{quantity_product}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Retrieving_Products",
									"item": [
										{
											"name": "Retrieve_products_from_wh",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successes - 200 Ok\", function() {\r",
															"    pm.response.to.have.status(200)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/{{warehouseId}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														"{{warehouseId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve_products_from_wh_401",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Unathorized access - 401 Ok\", function() {\r",
															"    pm.response.to.have.status(401)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMzdiMTU5Zi1lODc1LTRhM2UtYWMyMC0zMWRmMTA1N2IzMTIiLCJpc19zdXBlcmFkbWluIjp0cnVlLCJleHAiOjE3NDEzNjE4MzV9.FJRfcgLPVyz7F2JGpKgMQqrmtTIyUm4_r1Bb1z5CBLy",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/{{warehouseId}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														"{{warehouseId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve_products_from_wh_405",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\" Method Not Allowed- 405 Ok\", function() {\r",
															"    pm.response.to.have.status(405)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve_products_from_wh_404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Not found - 404 Ok\", function() {\r",
															"    pm.response.to.have.status(404)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/b88309ac-8a3e-4e77-92a5-63e66c8412b0",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														"b88309ac-8a3e-4e77-92a5-63e66c8412b0"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retrieve_products_from_wh_422",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Unprocessable entity - 422 Ok\", function() {\r",
															"    pm.response.to.have.status(422)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/b88309ac-8a3e-4e77-92a5-63e66c8412b",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														"b88309ac-8a3e-4e77-92a5-63e66c8412b"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "UPDATE_Product_on_WareHouse",
									"item": [
										{
											"name": "UPDATE_QUANTITY",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/{{product_id}}?product_warehouse_id={{product_warehouse_id}}&quantity=100",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														"{{product_id}}"
													],
													"query": [
														{
															"key": "product_warehouse_id",
															"value": "{{product_warehouse_id}}"
														},
														{
															"key": "quantity",
															"value": "100"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "UPDATE_QUANTITY_401",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Unathorized - 401\", function() {\r",
															"    pm.response.to.have.status(401)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer eyJhbGKiOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyMzdiMTU5Zi1lODc1LTRhM2UtYWMyMC0zMWRmMTA1N2IzMTIiLCJpc19zdXBlcmFkbWluIjp0cnVlLCJleHAiOjE3NDEzNjg2NTl9.cVEA5GD8lgnBCRMyVay-k7ba6sCTvxNe06lcuMyJSFY",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/{{product_id}}?product_warehouse_id={{warehouseId}}&quantity=0",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														"{{product_id}}"
													],
													"query": [
														{
															"key": "product_warehouse_id",
															"value": "{{warehouseId}}"
														},
														{
															"key": "quantity",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "UPDATE_QUANTITY_404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Not found - 404\", function() {\r",
															"    pm.response.to.have.status(404)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/{{product_id}}?product_warehouse_id={{product_warehouse_id}}&quantity={{quantity_product}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														"{{product_id}}"
													],
													"query": [
														{
															"key": "product_warehouse_id",
															"value": "{{product_warehouse_id}}"
														},
														{
															"key": "quantity",
															"value": "{{quantity_product}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "DELETE_PRODUCTS_FROM_WH",
									"item": [
										{
											"name": "Delete_product_200",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete product - 200\", function() {\r",
															"    pm.response.to.have.status(200)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/{{product_id}}?product_warehouse_id={{product_warehouse_id}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														"{{product_id}}"
													],
													"query": [
														{
															"key": "product_warehouse_id",
															"value": "{{product_warehouse_id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete_product_404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Not found\", function(){\r",
															"    pm.response.to.have.status(404)\r",
															"})"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{accessToken}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8002/productinwarehouses/{{product_id}}?product_warehouse_id={{product_warehouse_id}}",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8002",
													"path": [
														"productinwarehouses",
														"{{product_id}}"
													],
													"query": [
														{
															"key": "product_warehouse_id",
															"value": "{{product_warehouse_id}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update_Warehouse",
							"item": [
								{
									"name": "Warehouse with empty optional fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function getRandomName() {\r",
													"    const characters = \"abcdefghijklmnopqrstuvwxyz012345678\";\r",
													"    const length = Math.floor(Math.random() * (100 - 3 + 1)) + 3;\r",
													"    let new_location = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        new_location += characters.charAt(Math.floor(Math.random() * characters.length));\r",
													"    }\r",
													"    return new_location.charAt(0).toUpperCase() + new_location.slice(1);\r",
													"}\r",
													"pm.environment.set (\"new_location\", getRandomName());\r",
													"const new_location = pm.environment.get(\"new_location\");\r",
													"console.log (new_location);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 200 OK!\", function () {\r",
													"    pm.response.to.have (200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"location\": \"dUNzkJ0lsrUPc62hDiETJb\",\r\n  // Warehouse Location:\r\n  // - Required field\r\n  // - Maximum length: 255 characters\r\n  // - No restrictions on input values\r\n  // - Must be unique (duplicate locations return a 422 error)\r\n\r\n  \"capacity\": {{capacity}},\r\n  // Warehouse Capacity:\r\n  // - Required field\r\n  // - Must be a positive number representing the maximum volume in cubic meters\r\n\r\n  \"current_stock\": {{current_stock}},\r\n  // Current Stock:\r\n  // - Auto-filled with a default value of 0\r\n  // - Must be a whole number, not less than 0, representing the count of product items in the warehouse\r\n\r\n\r\n  \"is_active\": {{is_active}}\r\n  // Warehouse Active Status:\r\n  // - Required field\r\n  // - Boolean value (true/false)\r\n\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/{{warehouseId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"{{warehouseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Warehouse Update with all fields filled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 200 OK! Supplier was uppdated\", function () {\r",
													"    pm.response.to.have (200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function getRandomName() {\r",
													"    const characters = \"abcdefghijklmnopqrstuvwxyz012345678\";\r",
													"    const length = Math.floor(Math.random() * (100 - 3 + 1)) + 3;\r",
													"    let new_name_supplier = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        new_name_supplier += characters.charAt(Math.floor(Math.random() * characters.length));\r",
													"    }\r",
													"    return new_name_supplier.charAt(0).toUpperCase() + new_name_supplier.slice(1);\r",
													"}\r",
													"pm.environment.set (\"new_name_supplier\", getRandomName());\r",
													"const new_name_supplier = pm.environment.get(\"new_name_supplier\");\r",
													"console.log (new_name_supplier);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"location\": \"jknn2f9fBNg0YeiWdzym\",\r\n  // Warehouse Location:\r\n  // - Required field\r\n  // - Maximum length: 255 characters\r\n  // - No restrictions on input values\r\n  // - Must be unique (duplicate locations return a 422 error)\r\n\r\n  \"manager_name\": \"{{manager_name}}\",\r\n  // Warehouse Manager Name:\r\n  // - Optional field\r\n  // - Maximum length: 100 characters\r\n  // - Can contain only letters\r\n\r\n  \"capacity\": {{capacity}},\r\n  // Warehouse Capacity:\r\n  // - Required field\r\n  // - Must be a positive number representing the maximum volume in cubic meters\r\n\r\n  \"current_stock\": {{current_stock}},\r\n  // Current Stock:\r\n  // - Auto-filled with a default value of 0\r\n  // - Must be a whole number, not less than 0, representing the count of product items in the warehouse\r\n\r\n  \"contact_number\": \"{{contact_number}}\",\r\n  // Warehouse Contact Number:\r\n  // - Optional field\r\n  // - Maximum length: 15 characters\r\n  // - Can contain only digits and the \"+\" sign\r\n\r\n  \"email\": \"{{email}}\",\r\n  // Warehouse Contact Email:\r\n  // - Optional field\r\n  // - Maximum length: 255 characters\r\n  // - Must be in a valid email format\r\n\r\n  \"is_active\": {{is_active}},\r\n  // Warehouse Active Status:\r\n  // - Required field\r\n  // - Boolean value (true/false)\r\n\r\n  \"area_size\": {{area_size}}\r\n  // Warehouse Area Size:\r\n  // - Optional field\r\n  // - Floating-point number\r\n  // - Maximum value: 1,000,000.00\r\n  // - Must be a positive number representing the warehouse area in square meters\r\n  // - Input format: e.g., 1.25\r\n  //SHOULD BE CLARIFIED!!! Decimal input should have no more than 7 digits in total???\r\n  //\"Decimal input should have no more than 5 digits before the decimal point????\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/{{warehouseId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"{{warehouseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Warehouse Update with empty body request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"ok. 200. The supplier was uppdated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/{{warehouseId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"{{warehouseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Warehouse Update with missed mandatory filed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 200 OK! supplier was uppdated\", function () {\r",
													"    pm.response.to.have (200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \r\n\r\n\r\n\r\n  \"current_stock\": {{current_stock}}\r\n  // Current Stock:\r\n  // - Auto-filled with a default value of 0\r\n  // - Must be a whole number, not less than 0, representing the count of product items in the warehouse\r\n\r\n\r\n\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/{{warehouseId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"{{warehouseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Warehouse Update with warehouse_id doesn't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"404, supplier_id doesn't exist\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"location\": \"{{location}}\",\r\n  // Warehouse Location:\r\n  // - Required field\r\n  // - Maximum length: 255 characters\r\n  // - No restrictions on input values\r\n  // - Must be unique (duplicate locations return a 422 error)\r\n\r\n  \"manager_name\": \"{{manager_name}}\",\r\n  // Warehouse Manager Name:\r\n  // - Optional field\r\n  // - Maximum length: 100 characters\r\n  // - Can contain only letters\r\n\r\n  \"capacity\": {{capacity}},\r\n  // Warehouse Capacity:\r\n  // - Required field\r\n  // - Must be a positive number representing the maximum volume in cubic meters\r\n\r\n  \"current_stock\": {{current_stock}},\r\n  // Current Stock:\r\n  // - Auto-filled with a default value of 0\r\n  // - Must be a whole number, not less than 0, representing the count of product items in the warehouse\r\n\r\n  \"contact_number\": \"{{contact_number}}\",\r\n  // Warehouse Contact Number:\r\n  // - Optional field\r\n  // - Maximum length: 15 characters\r\n  // - Can contain only digits and the \"+\" sign\r\n\r\n  \"email\": \"{{email}}\",\r\n  // Warehouse Contact Email:\r\n  // - Optional field\r\n  // - Maximum length: 255 characters\r\n  // - Must be in a valid email format\r\n\r\n  \"is_active\": {{is_active}},\r\n  // Warehouse Active Status:\r\n  // - Required field\r\n  // - Boolean value (true/false)\r\n\r\n  \"area_size\": {{area_size}}\r\n  // Warehouse Area Size:\r\n  // - Optional field\r\n  // - Floating-point number\r\n  // - Maximum value: 1,000,000.00\r\n  // - Must be a positive number representing the warehouse area in square meters\r\n  // - Input format: e.g., 1.25\r\n  //SHOULD BE CLARIFIED!!! Decimal input should have no more than 7 digits in total???\r\n  //\"Decimal input should have no more than 5 digits before the decimal point????\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/d381a36b-9ae6-4c09-831c-1020296bf840",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"d381a36b-9ae6-4c09-831c-1020296bf840"
											]
										}
									},
									"response": []
								},
								{
									"name": "Warehouse Update with No valid Authorization token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"401, Invalid token or unauthorized access.\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3OTA4YzI0ZS04N2IzLTRlNDktYjM5Zi1iYWViMGQ3NmMxMDYiLCJpc19zdXBlcmFkbWluIjpmYWxzZSwiZXhwIjoxNzM5MDYwMTM0fQ.QNE2YpGMzQSASa6CzNc3lHM7qUvXOAdvPhz3ouMRN8o",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"location\": \"{{new_location}}\",\r\n  // Warehouse Location:\r\n  // - Required field\r\n  // - Maximum length: 255 characters\r\n  // - No restrictions on input values\r\n  // - Must be unique (duplicate locations return a 422 error)\r\n\r\n  \"manager_name\": \"{{manager_name}}\",\r\n  // Warehouse Manager Name:\r\n  // - Optional field\r\n  // - Maximum length: 100 characters\r\n  // - Can contain only letters\r\n\r\n  \"capacity\": {{capacity}},\r\n  // Warehouse Capacity:\r\n  // - Required field\r\n  // - Must be a positive number representing the maximum volume in cubic meters\r\n\r\n  \"current_stock\": {{current_stock}},\r\n  // Current Stock:\r\n  // - Auto-filled with a default value of 0\r\n  // - Must be a whole number, not less than 0, representing the count of product items in the warehouse\r\n\r\n  \"contact_number\": \"{{contact_number}}\",\r\n  // Warehouse Contact Number:\r\n  // - Optional field\r\n  // - Maximum length: 15 characters\r\n  // - Can contain only digits and the \"+\" sign\r\n\r\n  \"email\": \"{{email}}\",\r\n  // Warehouse Contact Email:\r\n  // - Optional field\r\n  // - Maximum length: 255 characters\r\n  // - Must be in a valid email format\r\n\r\n  \"is_active\": {{is_active}},\r\n  // Warehouse Active Status:\r\n  // - Required field\r\n  // - Boolean value (true/false)\r\n\r\n  \"area_size\": {{area_size}}\r\n  // Warehouse Area Size:\r\n  // - Optional field\r\n  // - Floating-point number\r\n  // - Maximum value: 1,000,000.00\r\n  // - Must be a positive number representing the warehouse area in square meters\r\n  // - Input format: e.g., 1.25\r\n  //SHOULD BE CLARIFIED!!! Decimal input should have no more than 7 digits in total???\r\n  //\"Decimal input should have no more than 5 digits before the decimal point????\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/{{warehouseId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"{{warehouseId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE_Warehouse",
							"item": [
								{
									"name": "Warehouse deletion",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function getRandomName() {\r",
													"    const characters = \"abcdefghijklmnopqrstuvwxyz012345678\";\r",
													"    const length = Math.floor(Math.random() * (100 - 3 + 1)) + 3;\r",
													"    let new_location = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        new_location += characters.charAt(Math.floor(Math.random() * characters.length));\r",
													"    }\r",
													"    return new_location.charAt(0).toUpperCase() + new_location.slice(1);\r",
													"}\r",
													"pm.environment.set (\"new_location\", getRandomName());\r",
													"const new_location = pm.environment.get(\"new_location\");\r",
													"console.log (new_location);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 200 OK! The warehouse is deleted.\", function () {\r",
													"    pm.response.to.have (200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/{{warehouseId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"{{warehouseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Warehouse Update with warehouse_id doesn't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"404, supplier_id doesn't exist\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/d381a36b-9ae6-4c09-831c-1020296bf840",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"d381a36b-9ae6-4c09-831c-1020296bf840"
											]
										}
									},
									"response": []
								},
								{
									"name": "Warehouse Update with No valid Authorization token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"401, Invalid token or unauthorized access.\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3OTA4YzI0ZS04N2IzLTRlNDktYjM5Zi1iYWViMGQ3NmMxMDYiLCJpc19zdXBlcmFkbWluIjpmYWxzZSwiZXhwIjoxNzM5MDYwMTM0fQ.QNE2YpGMzQSASa6CzNc3lHM7qUvXOAdvPhz3ouMRN8o",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/warehouses/{{warehouseId}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"warehouses",
												"{{warehouseId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Function to generate a random warehouse location\r",
									"function getLocation() {\r",
									"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \";\r",
									"    let location = \"\";\r",
									"    // Generate a random location with a maximum length of 255 characters\r",
									"    for (let i = 0; i < Math.floor(Math.random() * (255 - 3 + 1)) + 3; i++) {\r",
									"        location += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    // Remove any characters that are not valid in JSON strings\r",
									"    location = location.replace(/[\"\\\\{}[\\],:<>|/'^~`=()&]/g, \"\");\r",
									"    return location;\r",
									"}\r",
									"\r",
									"// Function to generate a random warehouse manager name (Optional)\r",
									"function getManagerName() {\r",
									"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"    const length = Math.floor(Math.random() * 100) + 1; // Max 100 characters\r",
									"    let managerName = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        managerName += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"\r",
									"    return managerName;\r",
									"}\r",
									"\r",
									"// Function to generate a random warehouse capacity (Required, positive number)\r",
									"function getCapacity() {\r",
									"    return Math.floor(Math.random() * 10000) + 1; // Must be positive\r",
									"}\r",
									"\r",
									"// Function to generate the current stock (Auto-filled with 0)\r",
									"function getCurrentStock() {\r",
									"    return 0;\r",
									"}\r",
									"\r",
									"// Function to generate a valid contact number (Optional, max 15 chars)\r",
									"function getContactNumber() {\r",
									"    const numbers = \"0123456789\";\r",
									"    const length = Math.floor(Math.random() * 14) + 1; // Max 15 characters\r",
									"    let contactNumber = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        contactNumber += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
									"    }\r",
									"\r",
									"    contactNumber = \"+\" + contactNumber;\r",
									"\r",
									"    return contactNumber;\r",
									"}\r",
									"\r",
									"// Function to generate a valid email (Optional, max 255 chars)\r",
									"function getEmail() {\r",
									"    const domains = [\"example.com\", \"test.com\", \"warehouse.org\"];\r",
									"    const user = Math.random().toString(36).substring(2, 10); // Random username\r",
									"    const domain = domains[Math.floor(Math.random() * domains.length)];\r",
									"\r",
									"    return `${user}@${domain}`;\r",
									"}\r",
									"\r",
									"// Function to generate warehouse active status (Required, boolean)\r",
									"function getIsActive() {\r",
									"    return Math.random() < 0.5; // Randomly true or false\r",
									"}\r",
									"\r",
									"// Function to generate warehouse area size (Optional, float with max 5 digits before the decimal point)\r",
									"function getAreaSize() {\r",
									"    // Generate a value between 0 and 99999.9 (ensures no more than 5 digits before the decimal point)\r",
									"    let areaSize = Math.random() * 99999.9; // Generate a value between 0 and 99999.9\r",
									"    // Round the value to one decimal place and ensure it doesn't exceed the 5 digits before the decimal point\r",
									"    return parseFloat(areaSize.toFixed(1)); // Round to one decimal place\r",
									"}\r",
									"\r",
									"\r",
									"// Setting environment variables (For Postman or other API testing)\r",
									"pm.environment.set(\"location\", getLocation());\r",
									"pm.environment.set(\"manager_name\", getManagerName());\r",
									"pm.environment.set(\"capacity\", getCapacity());\r",
									"pm.environment.set(\"current_stock\", getCurrentStock());\r",
									"pm.environment.set(\"contact_number\", getContactNumber());\r",
									"pm.environment.set(\"email\", getEmail());\r",
									"pm.environment.set(\"is_active\", getIsActive());\r",
									"pm.environment.set(\"area_size\", getAreaSize());\r",
									"\r",
									"// JSON Payload Output\r",
									"const warehousePayload = {\r",
									"    \"location\": pm.environment.get(\"location\"),\r",
									"    \"manager_name\": pm.environment.get(\"manager_name\"),\r",
									"    \"capacity\": pm.environment.get(\"capacity\"),\r",
									"    \"current_stock\": pm.environment.get(\"current_stock\"),\r",
									"    \"contact_number\": pm.environment.get(\"contact_number\"),\r",
									"    \"email\": pm.environment.get(\"email\"),\r",
									"    \"is_active\": pm.environment.get(\"is_active\"),\r",
									"    \"area_size\": pm.environment.get(\"area_size\")\r",
									"};\r",
									"\r",
									"console.log(warehousePayload);\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Supplier",
					"item": [
						{
							"name": "Update_Supplier",
							"item": [
								{
									"name": "Supplier with empty optional fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function getRandomName() {\r",
													"    const characters = \"abcdefghijklmnopqrstuvwxyz012345678\";\r",
													"    const length = Math.floor(Math.random() * (100 - 3 + 1)) + 3;\r",
													"    let new_name_supplier = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        new_name_supplier += characters.charAt(Math.floor(Math.random() * characters.length));\r",
													"    }\r",
													"    return new_name_supplier.charAt(0).toUpperCase() + new_name_supplier.slice(1);\r",
													"}\r",
													"pm.environment.set (\"new_name_supplier\", getRandomName());\r",
													"const new_name_supplier = pm.environment.get(\"new_name_supplier\");\r",
													"console.log (new_name_supplier);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 200 OK!\", function () {\r",
													"    pm.response.to.have (200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {  }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/suppliers/{{supplierID}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"{{supplierID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Supplier Update with all fields filled",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 200 OK! Supplier was uppdated\", function () {\r",
													"    pm.response.to.have (200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function getRandomName() {\r",
													"    const characters = \"abcdefghijklmnopqrstuvwxyz012345678\";\r",
													"    const length = Math.floor(Math.random() * (100 - 3 + 1)) + 3;\r",
													"    let new_name_supplier = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        new_name_supplier += characters.charAt(Math.floor(Math.random() * characters.length));\r",
													"    }\r",
													"    return new_name_supplier.charAt(0).toUpperCase() + new_name_supplier.slice(1);\r",
													"}\r",
													"pm.environment.set (\"new_name_supplier\", getRandomName());\r",
													"const new_name_supplier = pm.environment.get(\"new_name_supplier\");\r",
													"console.log (new_name_supplier);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{new_name_supplier}}\", \r\n  // Supplier Name: \r\n  // - Required field\r\n  // - Length should be between 3 and 100 characters\r\n\r\n  \"contact_name\": \"{{contact_name}}\", \r\n  // Contact Name of the Supplier: \r\n  // - Required field\r\n  // - Maximum length: 100 characters\r\n\r\n  \"contact_email\": \"{{contact_email}}\", \r\n  // Contact Email: \r\n  // - Required field\r\n  // - Must be in a valid email format (e.g., containing \"@\" with a proper domain)\r\n  // - Maximum length: 20 characters\r\n\r\n  \"phone_number\": \"{{phone_number}}\", \r\n  // Phone Number: \r\n  // - Optional field\r\n  // - Maximum length: 15 characters, can include only digits and the \"+\" sign\r\n\r\n  \"address\": \"{{address}}\", \r\n  // Supplier Address: \r\n  // - Optional field\r\n  // - Maximum length: 200 characters\r\n  // - Can include only letters and numbers\r\n\r\n  \"country\": \"{{country}}\", \r\n  // Country of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters\r\n\r\n  \"city\": \"{{city}}\", \r\n  // City of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters, spaces, or hyphens\r\n\r\n  \"website\": \"{{website}}\" \r\n  // Supplier Website: \r\n  // - Optional field\r\n  // - Must be a valid URL\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/suppliers/{{supplierID}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"{{supplierID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Supplier Update with wrong data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 200 OK! Supplier was uppdated\", function () {\r",
													"    pm.response.to.have (200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function getRandomName() {\r",
													"    const characters = \"abcdefghijklmnopqrstuvwxyz012345678\";\r",
													"    const length = Math.floor(Math.random() * (100 - 3 + 1)) + 3;\r",
													"    let new_name_supplier = \"\";\r",
													"    for (let i = 0; i < length; i++) {\r",
													"        new_name_supplier += characters.charAt(Math.floor(Math.random() * characters.length));\r",
													"    }\r",
													"    return new_name_supplier.charAt(0).toUpperCase() + new_name_supplier.slice(1);\r",
													"}\r",
													"pm.environment.set (\"new_name_supplier\", getRandomName());\r",
													"const new_name_supplier = pm.environment.get(\"new_name_supplier\");\r",
													"console.log (new_name_supplier);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{new_name_supplier}}\", \r\n  // Supplier Name: \r\n  // - Required field\r\n  // - Length should be between 3 and 100 characters\r\n\r\n  \"contact_name\": \"{{contact_name}}\", \r\n  // Contact Name of the Supplier: \r\n  // - Required field\r\n  // - Maximum length: 100 characters\r\n\r\n  \"contact_email\": \"e@\", \r\n  // Contact Email: \r\n  // - Required field\r\n  // - Must be in a valid email format (e.g., containing \"@\" with a proper domain)\r\n  // - Maximum length: 20 characters\r\n\r\n  \"phone_number\": \"10+++\", \r\n  // Phone Number: \r\n  // - Optional field\r\n  // - Maximum length: 15 characters, can include only digits and the \"+\" sign\r\n\r\n  \"address\": \"@@#@\", \r\n  // Supplier Address: \r\n  // - Optional field\r\n  // - Maximum length: 200 characters\r\n  // - Can include only letters and numbers\r\n\r\n  \"country\": \"12345\", \r\n  // Country of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters\r\n\r\n  \"city\": \"1235\", \r\n  // City of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters, spaces, or hyphens\r\n\r\n  \"website\": \"wrong\" \r\n  // Supplier Website: \r\n  // - Optional field\r\n  // - Must be a valid URL\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/suppliers/{{supplierID}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"{{supplierID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Supplier Update with empty body request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"ok. 200. The supplier was uppdated\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/suppliers/{{supplierID}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"{{supplierID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Supplier Update with missed mandatory filed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 200 OK! supplier was uppdated\", function () {\r",
													"    pm.response.to.have (200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \r\n  \"phone_number\": \"{{phone_number}}\", \r\n  // Phone Number: \r\n  // - Optional field\r\n  // - Maximum length: 15 characters, can include only digits and the \"+\" sign\r\n\r\n  \"address\": \"{{address}}\", \r\n  // Supplier Address: \r\n  // - Optional field\r\n  // - Maximum length: 200 characters\r\n  // - Can include only letters and numbers\r\n\r\n  \"country\": \"{{country}}\", \r\n  // Country of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters\r\n\r\n  \"city\": \"{{city}}\", \r\n  // City of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters, spaces, or hyphens\r\n\r\n  \"website\": \"{{website}}\" \r\n  // Supplier Website: \r\n  // - Optional field\r\n  // - Must be a valid URL\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/suppliers/{{supplierID}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"{{supplierID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Supplier Update with supplier_id doesn't exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"404, supplier_id doesn't exist\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"test\",\r\n  \"description\": \"This is a description., A product description that fits within the 500 character limit. This description will be expanded to exactly 500 characters by adding additional filler text here. The aim is to reach the limit without going over, which will allow this description to be valid. This should now be exactly 500 characters long and fully comply with the constraints of the system. Let's keep going until we hit exactly 500. Done! This is exactly 500 characters now %, A product description that fi\",\r\n  \"category\": \"TEST\",\r\n  \"price\": 99.10,\r\n  \"stock_quantity\": 1,\r\n  \"supplier_id\": \"6cc42bc9-b8b7-4a1d-8535-2ba4af779a4d\",\r\n  \"image_url\": \"https://example.com/image.jpg\",\r\n  \"weight\": 100.00,\r\n  \"dimensions\": \"12345678901234567890123456789012345678902345678901234567890x1234567890123456789012345678901234567890\",\r\n  \"manufacturer\": \"111rr11111\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/suppliers/2e1791b4-4bb2-476a-8003-f87d8203da80",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"2e1791b4-4bb2-476a-8003-f87d8203da80"
											]
										}
									},
									"response": []
								},
								{
									"name": "Supplier Update with No valid Authorization token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"401, Invalid token or unauthorized access.\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3OTA4YzI0ZS04N2IzLTRlNDktYjM5Zi1iYWViMGQ3NmMxMDYiLCJpc19zdXBlcmFkbWluIjpmYWxzZSwiZXhwIjoxNzM5MDYwMTM0fQ.QNE2YpGMzQSASa6CzNc3lHM7qUvXOAdvPhz3ouMRN8o",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"test\",\r\n  \"description\": \"This is a description., A product description that fits within the 500 character limit. This description will be expanded to exactly 500 characters by adding additional filler text here. The aim is to reach the limit without going over, which will allow this description to be valid. This should now be exactly 500 characters long and fully comply with the constraints of the system. Let's keep going until we hit exactly 500. Done! This is exactly 500 characters now %, A product description that fi\",\r\n  \"category\": \"TEST\",\r\n  \"price\": 99.10,\r\n  \"stock_quantity\": 1,\r\n  \"supplier_id\": \"6cc42bc9-b8b7-4a1d-8535-2ba4af779a4d\",\r\n  \"image_url\": \"https://example.com/image.jpg\",\r\n  \"weight\": 100.00,\r\n  \"dimensions\": \"12345678901234567890123456789012345678902345678901234567890x1234567890123456789012345678901234567890\",\r\n  \"manufacturer\": \"111rr11111\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8002/suppliers/{{supplierID}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"{{supplierID}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete_Supplier",
							"item": [
								{
									"name": "Delete_supplier_200_without_products",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 200. The product was deleted.\", function(){\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/suppliers/{{supplierID}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"{{supplierID}}"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_supplier_401",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status cide is 401. Invalid token or unauthorized access.\", function() {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmYWY2Nzk3NC0zNTUyLTQwOGUtODVlMi02ZWVlNTFkOWUxMzYiLCJpc19zdXBlcmFkbWluIjpmYWxzZSwiZXhwIjoxNzM3NzE5MzA1fQ.alooTAOt-oYATMSSWbCPX59NPK7lccIZqpjE_DT5Jbw",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/suppliers/{{supplierID}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"{{supplierID}}"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_supplier_404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Status code is 404. Supplier not found.\", function(){\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/suppliers/be53c59f-c7c7-434f-a8e9-960adc2084",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"be53c59f-c7c7-434f-a8e9-960adc2084"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Retrieve_suppliers",
							"item": [
								{
									"name": "Retrieving_all_suppliers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200. The suppliers were retrieved.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const suppliers = pm.response.json();\r",
													"\r",
													"if (Array.isArray(suppliers) && suppliers.length > 0) {\r",
													"    const RandomSup = Math.floor(Math.random() * suppliers.length);\r",
													"    const supplierID = suppliers[RandomSup]?.supplier_id; \r",
													"    \r",
													"    if (supplierID) {\r",
													"        pm.environment.set(\"supplierID\", supplierID);\r",
													"        console.log(\"Random Supplier ID:\", supplierID);\r",
													"    } else {\r",
													"        console.log(\"Error: supplier_id not found in the selected supplier.\");\r",
													"    }\r",
													"} else {\r",
													"    console.log(\"Error: Supplier list is empty or not an array.\");\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{base_url_products}}/suppliers/",
											"host": [
												"{{base_url_products}}"
											],
											"path": [
												"suppliers",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving_Supplier_by_ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200. The supplier by ID was retrieved.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const supplierID = pm.response.json().supplier_id;\r",
													"const name_supplier = pm.response.json().name;\r",
													"\r",
													"pm.environment.set (\"supplierID\", supplierID);\r",
													"pm.environment.set (\"supplier_name\", name_supplier);\r",
													"\r",
													"\r",
													"console.log(\"Supplier ID:\", supplierID);\r",
													"console.log(\"Supplier Name:\", name_supplier);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/suppliers/1b754b05-7e2c-4e19-9dd8-e17271c60cc4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"1b754b05-7e2c-4e19-9dd8-e17271c60cc4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving_supplier_by_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200. The supplier by name was retrieved.\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{base_url_products}}/search_suppliers/?name=JsKYAnpo2EcZPZkC2GdDGBPZh4Cph29ZadOq27T YlO5Q9Q",
											"host": [
												"{{base_url_products}}"
											],
											"path": [
												"search_suppliers",
												""
											],
											"query": [
												{
													"key": "name",
													"value": "JsKYAnpo2EcZPZkC2GdDGBPZh4Cph29ZadOq27T YlO5Q9Q"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving_Supplier_by_ID 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404. The supplier not found.\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/suppliers/be53c59f-c7c7-434f-a8e9-960adc208419",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"be53c59f-c7c7-434f-a8e9-960adc208419"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving_Supplier_by_ID 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test (\"Invalid supplier_id. Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{accessToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/suppliers/null",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"null"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving_Supplier_by_ID 401",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test (\"Invalid token or unauthorized access. Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI0Njg3ZDRhOC0wNmU5LTRmNzMtYjdkMy1lMzgwMjc4NDhmODgiLCJpc19zdXBlcmFkbWluIjpmYWxzZSwiZXhwIjoxNzMxMzM3MDEyfQ.h02FAUz4WIx46pxrvQJWI0NJmO0ZpTfacLsEWH24BA8",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8002/suppliers/{{supplierID}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8002",
											"path": [
												"suppliers",
												"{{supplierID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Create_Supplier",
					"item": [
						{
							"name": "Create_Supplier_all_field_200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Status code is 201. The supplier was created.\", function () {\r",
											"    pm.response.to.have.status(201)\r",
											"});\r",
											"\r",
											"const supplierID = pm.response.json().supplier_id;\r",
											"\r",
											"pm.environment.set (\"supplierID\", supplierID);\r",
											"\r",
											"console.log(\"Supplier ID:\", supplierID);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\": \"{{name_supplier}}\", \r\n  // Supplier Name: \r\n  // - Required field\r\n  // - Length should be between 3 and 100 characters\r\n\r\n  \"contact_name\": \"{{contact_name}}\", \r\n  // Contact Name of the Supplier: \r\n  // - Required field\r\n  // - Maximum length: 100 characters\r\n\r\n  \"contact_email\": \"{{contact_email}}\", \r\n  // Contact Email: \r\n  // - Required field\r\n  // - Must be in a valid email format (e.g., containing \"@\" with a proper domain)\r\n  // - Maximum length: 20 characters\r\n\r\n  \"phone_number\": \"{{phone_number}}\", \r\n  // Phone Number: \r\n  // - Optional field\r\n  // - Maximum length: 15 characters, can include only digits and the \"+\" sign\r\n\r\n  \"address\": \"{{address}}\", \r\n  // Supplier Address: \r\n  // - Optional field\r\n  // - Maximum length: 200 characters\r\n  // - Can include only letters and numbers\r\n\r\n  \"country\": \"{{country}}\", \r\n  // Country of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters\r\n\r\n  \"city\": \"{{city}}\", \r\n  // City of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters, spaces, or hyphens\r\n\r\n  \"website\": \"{{website}}\" \r\n  // Supplier Website: \r\n  // - Optional field\r\n  // - Must be a valid URL\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/suppliers/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"suppliers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_Supplier_all_field_200 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Status code is 201. The supplier was created.\", function () {\r",
											"    pm.response.to.have.status(201)\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let supplierID = response.supplier_id;\r",
											"\r",
											"pm.environment.set (\"supplierID\", supplierID);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_supplier}}\", \r\n  // Supplier Name: \r\n  // - Required field\r\n  // - Length should be between 3 and 100 characters\r\n\r\n  \"contact_name\": \"{{contact_name}}\", \r\n  // Contact Name of the Supplier: \r\n  // - Required field\r\n  // - Maximum length: 100 characters\r\n\r\n  \"contact_email\": \"{{contact_email}}\", \r\n  // Contact Email: \r\n  // - Required field\r\n  // - Must be in a valid email format (e.g., containing \"@\" with a proper domain)\r\n  // - Maximum length: 20 characters\r\n\r\n  \"phone_number\": \"{{phone_number}}\", \r\n  // Phone Number: \r\n  // - Optional field\r\n  // - Maximum length: 15 characters, can include only digits and the \"+\" sign\r\n\r\n  \"address\": \"{{address}}\", \r\n  // Supplier Address: \r\n  // - Optional field\r\n  // - Maximum length: 200 characters\r\n  // - Can include only letters and numbers\r\n\r\n  \"country\": \"{{country}}\", \r\n  // Country of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters\r\n\r\n  \"city\": \"{{city}}\", \r\n  // City of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters, spaces, or hyphens\r\n\r\n  \"website\": \"200@\" \r\n  // Supplier Website: \r\n  // - Optional field\r\n  // - Must be a valid URL\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/suppliers/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"suppliers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_Supplier_only_mandatory_200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Status code is 201. The supplier was created.\", function () {\r",
											"    pm.response.to.have.status(201)\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let supplierID = response.supplier_id;\r",
											"\r",
											"pm.environment.set (\"supplierID\", supplierID);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_supplier}}\", \r\n  // Supplier Name: \r\n  // - Required field\r\n  // - Length should be between 3 and 100 characters\r\n\r\n  \"contact_name\": \"{{contact_name}}\", \r\n  // Contact Name of the Supplier: \r\n  // - Required field\r\n  // - Maximum length: 100 characters\r\n\r\n  \"contact_email\": \"{{contact_email}}\" \r\n  // Contact Email: \r\n  // - Required field\r\n  // - Must be in a valid email format (e.g., containing \"@\" with a proper domain)\r\n  // - Maximum length: 20 characters\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/suppliers/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"suppliers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_Supplier_duplicate_name_422",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Status code is 422. The supplier is already exist.\", function () {\r",
											"    pm.response.to.have.status(422)\r",
											"});\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let supplierID = response.supplier_id;\r",
											"\r",
											"pm.environment.set (\"supplierID\", supplierID);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{dup_name}}\", \r\n  // Supplier Name: \r\n  // - Required field\r\n  // - Length should be between 3 and 100 characters\r\n\r\n  \"contact_name\": \"{{contact_name}}\", \r\n  // Contact Name of the Supplier: \r\n  // - Required field\r\n  // - Maximum length: 100 characters\r\n\r\n  \"contact_email\": \"{{contact_email}}\", \r\n  // Contact Email: \r\n  // - Required field\r\n  // - Must be in a valid email format (e.g., containing \"@\" with a proper domain)\r\n  // - Maximum length: 20 characters\r\n\r\n  \"phone_number\": \"{{phone_number}}\", \r\n  // Phone Number: \r\n  // - Optional field\r\n  // - Maximum length: 15 characters, can include only digits and the \"+\" sign\r\n\r\n  \"address\": \"{{address}}\", \r\n  // Supplier Address: \r\n  // - Optional field\r\n  // - Maximum length: 200 characters\r\n  // - Can include only letters and numbers\r\n\r\n  \"country\": \"{{country}}\", \r\n  // Country of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters\r\n\r\n  \"city\": \"{{city}}\", \r\n  // City of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters, spaces, or hyphens\r\n\r\n  \"website\": \"{{website}}\" \r\n  // Supplier Website: \r\n  // - Optional field\r\n  // - Must be a valid URL\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/suppliers/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"suppliers",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create_Supplier_all_field_200 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test (\"Status code is 201. The supplier was created.\", function () {\r",
											"    pm.response.to.have.status(201)\r",
											"});\r",
											"\r",
											"const supplierID = pm.response.json().supplier_id;\r",
											"\r",
											"pm.environment.set (\"supplierID\", supplierID);\r",
											"\r",
											"console.log(\"Supplier ID:\", supplierID);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{name_supplier}}\", \r\n  // Supplier Name: \r\n  // - Required field\r\n  // - Length should be between 3 and 100 characters\r\n\r\n  \"contact_name\": \"{{contact_name}}\", \r\n  // Contact Name of the Supplier: \r\n  // - Required field\r\n  // - Maximum length: 100 characters\r\n\r\n  \"contact_email\": \"{{e_mail}}\", \r\n  // Contact Email: \r\n  // - Required field\r\n  // - Must be in a valid email format (e.g., containing \"@\" with a proper domain)\r\n  // - Maximum length: 20 characters\r\n\r\n  \"phone_number\": \"{{phone_number}}\", \r\n  // Phone Number: \r\n  // - Optional field\r\n  // - Maximum length: 15 characters, can include only digits and the \"+\" sign\r\n\r\n  \"address\": \"{{address}}\", \r\n  // Supplier Address: \r\n  // - Optional field\r\n  // - Maximum length: 200 characters\r\n  // - Can include only letters and numbers\r\n\r\n  \"country\": \"{{country}}\", \r\n  // Country of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters\r\n\r\n  \"city\": \"{{city}}\", \r\n  // City of Supplier: \r\n  // - Optional field\r\n  // - Maximum length: 50 characters\r\n  // - Can include only letters, spaces, or hyphens\r\n\r\n  \"website\": \"{{website}}\" \r\n  // Supplier Website: \r\n  // - Optional field\r\n  // - Must be a valid URL\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8002/suppliers/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8002",
									"path": [
										"suppliers",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"// Supplier Name:\r",
									"// - Required field\r",
									"// - Length should be between 3 and 100 characters\r",
									"function getRandomNameSupplier() {\r",
									"    const lettersDigits = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \";\r",
									"    const length = Math.floor(Math.random() * (100 - 3 + 1)) + 3;\r",
									"    let name_supplier = \"\";\r",
									"\r",
									"    // Ensure the first character is a letter\r",
									"    const letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"    name_supplier += letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"\r",
									"    // Generate the remaining characters\r",
									"    for (let i = 1; i < length; i++) {\r",
									"        name_supplier += lettersDigits.charAt(Math.floor(Math.random() * lettersDigits.length));\r",
									"    }\r",
									"\r",
									"    return name_supplier;\r",
									"}\r",
									"\r",
									"// Contact Name of the Supplier:\r",
									"// - Required field\r",
									"// - Maximum length: 100 characters\r",
									"// - Can only contain letters, digits, and spaces\r",
									"\r",
									"function getRandomContactName() {\r",
									"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \";\r",
									"    const maxLength = 100;\r",
									"    const length = Math.floor(Math.random() * maxLength) + 1;\r",
									"    let contactName = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        contactName += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"\r",
									"    return contactName.trim(); // Trim to remove leading/trailing spaces\r",
									"}\r",
									"\r",
									"// Contact Email:\r",
									"// - Required field\r",
									"// - Must be in a valid email format (e.g., containing \"@\" with a proper domain)\r",
									"// - Maximum length: 20 characters\r",
									"function getRandomemail() {\r",
									"    const letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
									"    const characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
									"    \r",
									"    const minLocalPartLength = 15;  // Minimum length for the local part\r",
									"    const maxLocalPartLength = 20;  // Maximum length for the local part\r",
									"    const localPartLength = Math.floor(Math.random() * (maxLocalPartLength - minLocalPartLength + 1)) + minLocalPartLength; // 15-20 characters\r",
									"    \r",
									"    const domainLength = Math.floor(Math.random() * 4) + 3; // 3-6 characters for the domain\r",
									"    const extensionLength = Math.floor(Math.random() * 2) + 2; // 2-3 characters for the extension\r",
									"\r",
									"    let localPart = \"\";\r",
									"    let domain = \"\";\r",
									"    let extension = \"\";\r",
									"\r",
									"    // Ensure the first character of the local part is a letter\r",
									"    localPart += letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"\r",
									"    // Generate the remaining characters of the local part\r",
									"    for (let i = 1; i < localPartLength; i++) {\r",
									"        localPart += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"\r",
									"    // Ensure the domain starts with a letter\r",
									"    domain += letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"\r",
									"    // Generate the remaining characters of the domain\r",
									"    for (let i = 1; i < domainLength; i++) {\r",
									"        domain += letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    }\r",
									"\r",
									"    // Generate the extension (TLD)\r",
									"    for (let i = 0; i < extensionLength; i++) {\r",
									"        extension += letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    }\r",
									"\r",
									"    // Return the generated email address\r",
									"    return `${localPart}@${domain}.${extension}`;\r",
									"}\r",
									"// Phone Number:\r",
									"// - Optional field\r",
									"// - Maximum length: 15 characters, can include only digits and the \"+\" sign\r",
									"function getRandomPhoneNumber() {\r",
									"    const numbers = \"0123456789\";\r",
									"    const length = Math.floor(Math.random() * 4 ) + 11; // From 11 to 15\r",
									"    let phone_number = \"\";\r",
									"\r",
									"    phone_number += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
									"\r",
									"    for (let i = 1; i < length; i++) {\r",
									"        phone_number += numbers.charAt(Math.floor(Math.random() * numbers.length));\r",
									"    } \r",
									"\r",
									"    // Return the generated phone number\r",
									"    return \"+\" + phone_number;\r",
									"}\r",
									"\r",
									"// Supplier Address:\r",
									"// - Optional field\r",
									"// - Maximum length: 200 characters\r",
									"// - Can include only letters and numbers\r",
									"function getRandomAddress() {\r",
									"    const characters = \"qazwsxedcrfvtgbyhnujmikolpZAQXSWCDEVFRBGTNHYMJUKILOP0123456789\";\r",
									"    const letters = \"qazwsxedcrfvtgbyhnujmikolp\";\r",
									"\r",
									"    const length = Math.floor(Math.random() * 200 ) + 1; // From 1 to 200\r",
									"    let address = \"\";\r",
									"\r",
									"    address += letters.charAt(Math.floor(Math.random() * letters.length)).toUpperCase();\r",
									"    \r",
									"    for (let i = 1; i < length; i++) {\r",
									"        address += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    } \r",
									"\r",
									"    return address;\r",
									"}\r",
									"\r",
									"// Country of Supplier:\r",
									"// - Optional field\r",
									"// - Maximum length: 50 characters\r",
									"// - Can include only letters\r",
									"function getRandomCountry() {\r",
									"    const letters = \"qazwsxedcrfvtgbyhnujmikolp\";\r",
									"\r",
									"    const length = Math.floor(Math.random() * 50 ) + 1; // From 1 to 50\r",
									"    let country = \"\";\r",
									"\r",
									"    country += letters.charAt(Math.floor(Math.random() * letters.length)).toUpperCase();\r",
									"    \r",
									"    for (let i = 1; i < length; i++) {\r",
									"        country += letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    } \r",
									"\r",
									"    return country;\r",
									"}\r",
									"\r",
									"// City of Supplier:\r",
									"// - Optional field\r",
									"// - Maximum length: 50 characters\r",
									"// - Can include only letters, spaces, or hyphens\r",
									"function getRandomCity() {\r",
									"    const letters = \"qazwsxedcrfvtgbyhnujmikolp\";  // Only letters\r",
									"    const length = Math.floor(Math.random() * 50) + 1;  // Random length between 1 and 50\r",
									"    let city = \"\";\r",
									"\r",
									"    // Always start with an uppercase letter\r",
									"    city += letters.charAt(Math.floor(Math.random() * letters.length)).toUpperCase();\r",
									"\r",
									"    // Generate the remaining part of the city name\r",
									"    for (let i = 1; i < length; i++) {\r",
									"        // Choose a random letter from the list\r",
									"        let randomChar = letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"        city += randomChar;\r",
									"    }\r",
									"\r",
									"    return city;\r",
									"}\r",
									"\r",
									"// Supplier Website:\r",
									"// - Optional field\r",
									"// - Must be a valid URL\r",
									"function getRandomWebSite() {\r",
									"    const letters = \"qazwsxedcrfvtgbyhnujmikolpZAQXSWCDEVFRBGTNHYMJUKILOP\";\r",
									"    const characters = \"ZAQXSWCDEVFRBGTNHYMJUKILOPqazwsxedcrfvtgbyhnujmikolp0123456789\"; \r",
									"    const protocol = [\"https://www.\", \"http://\", \"https://\"];\r",
									"\r",
									"    const length2 = Math.floor(Math.random() * 3) + 5;\r",
									"    const length3 = Math.floor(Math.random() * 1) + 2;\r",
									"    let tld = \"\";\r",
									"    let sld = \"\";\r",
									"\r",
									"    sld += letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"\r",
									"    for (let i = 1; i < length2; i++) {\r",
									"        sld += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    } \r",
									"\r",
									"    for (let i = 0; i < length3; i++) {\r",
									"        tld += letters.charAt(Math.floor(Math.random() * letters.length));\r",
									"    }\r",
									"\r",
									"    const Randomprotocol = protocol[(Math.floor(Math.random() * protocol.length))];\r",
									"\r",
									"    return Randomprotocol + sld + \".\" + tld;\r",
									"}\r",
									"\r",
									"// Generate and store variables in Postman environment\r",
									"pm.environment.set(\"contact_email\", getRandomemail());\r",
									"pm.environment.set(\"name_supplier\", getRandomNameSupplier());\r",
									"pm.environment.set(\"contact_name\", getRandomContactName());\r",
									"pm.environment.set(\"phone_number\", getRandomPhoneNumber());\r",
									"pm.environment.set(\"address\", getRandomAddress());\r",
									"pm.environment.set(\"country\", getRandomCountry());\r",
									"pm.environment.set(\"city\", getRandomCity());\r",
									"pm.environment.set(\"website\", getRandomWebSite());\r",
									"\r",
									"// Get values from the environment\r",
									"const contact_email = pm.environment.get(\"contact_email\");\r",
									"const name_supplier = pm.environment.get(\"name_supplier\");\r",
									"const contact_name = pm.environment.get(\"contact_name\");\r",
									"const phone_number = pm.environment.get(\"phone_number\");\r",
									"const address = pm.environment.get(\"address\");\r",
									"const country = pm.environment.get(\"country\");\r",
									"const city = pm.environment.get(\"city\");\r",
									"const website = pm.environment.get(\"website\");\r",
									"\r",
									"// Log to console\r",
									"console.log({\r",
									"    \"name\": name_supplier, \r",
									"    \"contact_name\": contact_name, \r",
									"    \"contact_email\": contact_email, \r",
									"    \"phone_number\": phone_number, \r",
									"    \"address\": address, \r",
									"    \"country\": country, \r",
									"    \"city\": city, \r",
									"    \"website\": website\r",
									"});\r",
									"\r",
									"\r",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"let access_token = pm.environment.get (\"access_token\");\r",
							"let access_token_exp = false;\r",
							"\r",
							"if (access_token) {\r",
							"    let payload = JSON.parse (atob(access_token.split(\".\")[1]));\r",
							"    let currentTime=Math.floor(Date.now()/1000);\r",
							"    istokenexp = currentTime >= payload.exp;\r",
							"    console.log(payload, currentTime, istokenexp);\r",
							"}\r",
							"\r",
							"if (!access_token || istokenexp) {\r",
							"    console.log(\"Token is expired or missing. Fetching a new one.\");\r",
							"   // console.log(\"Current base_url_users:\", pm.environment.get(\"base_url_users\"));\r",
							"pm.sendRequest({\r",
							"        url: pm.environment.get(\"base_url_users\") + \"/login/\",\r",
							"        method: \"POST\",\r",
							"        header: {\r",
							"            \"Content-Type\": \"application/json\"\r",
							"        },\r",
							"        body: {\r",
							"            mode: \"raw\",\r",
							"            raw: JSON.stringify({\r",
							"                email: pm.environment.get(\"randomEmail\"),\r",
							"                password: pm.environment.get(\"randomPassword\")\r",
							"            })\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(\"Error fetching new access token:\", err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        // Parse the response and set the new access token\r",
							"        let response = res.json();\r",
							"        if (response.access_token) {\r",
							"            pm.environment.set(\"accessToken\", response.access_token);\r",
							"            console.log(\"New Access Token fetched and saved:\", response.access_token);\r",
							"        } else {\r",
							"            console.error(\"Failed to fetch new access token. Response:\", response);\r",
							"        }\r",
							"    });\r",
							"\r",
							"const Dupplicate_name = pm.environment.get(\"name_supplier\"); // for test duplication_name_supplier\r",
							"pm.environment.set(\"dup_name\", Dupplicate_name); // Store globally\r",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "additionalChecks",
			"item": [
				{
					"name": "getPendingProducts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8001/get-pending-products/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"get-pending-products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "refreshToken",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "beare {{refresh_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8001/refresh-token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8001",
							"path": [
								"refresh-token"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chats",
			"item": [
				{
					"name": "creationChat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The chat was cteated\", function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const chatId = response.id;\r",
									"pm.environment.set(\"chatId\", chatId)\r",
									"\r",
									"console.log(chatId);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"chatAddUser\",\r\n\"is_group\": \"0\",\r\n\"participants\": [\"{{userID}}\", \"abe58ba5-59d6-475c-b66f-c4739ee73a65\"]\r\n}\r\n//\"87c2a5d4-970d-44ce-a7a0-3cfab07172e6\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8004/chats",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8004",
							"path": [
								"chats"
							]
						}
					},
					"response": []
				},
				{
					"name": "addUsersToChat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The chat was cteated\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8004/chats/add_user?chat_id={{chatId}}&user_id={{userID}}&user_id=74359b0e-743f-4d55-b1fc-9f94f696d990&user_id=238286ab-4d7e-4ef0-9c4b-25cf17392be1&user_id=fc893f3a-03bd-4064-88c6-9a9760348431",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8004",
							"path": [
								"chats",
								"add_user"
							],
							"query": [
								{
									"key": "chat_id",
									"value": "{{chatId}}"
								},
								{
									"key": "user_id",
									"value": "{{userID}}"
								},
								{
									"key": "user_id",
									"value": "74359b0e-743f-4d55-b1fc-9f94f696d990"
								},
								{
									"key": "user_id",
									"value": "238286ab-4d7e-4ef0-9c4b-25cf17392be1"
								},
								{
									"key": "user_id",
									"value": "fc893f3a-03bd-4064-88c6-9a9760348431"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "creationChatsc404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The particitante wasn't found\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"TEST\",\r\n\"is_group\": \"true\",\r\n\"participants\": [\"cb62b1b1-ea4f-479a-936c-37194cf18bff\", \"5bc31993-8dd9-41bf-89d1-6c913c3694e1\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8004/chats",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8004",
							"path": [
								"chats"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrievingChats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The chats was retrieved successfully\", function() {\r",
									"pm.response.to.have.status(200);    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8004/chats",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8004",
							"path": [
								"chats"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrievingChatsById",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8004/chats/{{chatId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8004",
							"path": [
								"chats",
								"{{chatId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RetrievingMessages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8004/chats/{{chatId}}/messages",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8004",
							"path": [
								"chats",
								"{{chatId}}",
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "addinMessageOnChat",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"chat_id\": \"{{chatId}}\",\r\n  \"content\": \"chat test websocket\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8004/chats/{{chatId}}/messages",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8004",
							"path": [
								"chats",
								"{{chatId}}",
								"messages"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"let access_token = pm.environment.get (\"access_token\");\r",
							"let access_token_exp = false;\r",
							"\r",
							"if (access_token) {\r",
							"    let payload = JSON.parse (atob(access_token.split(\".\")[1]));\r",
							"    let currentTime=Math.floor(Date.now()/1000);\r",
							"    istokenexp = currentTime >= payload.exp;\r",
							"    console.log(payload, currentTime, istokenexp);\r",
							"}\r",
							"\r",
							"if (!access_token || istokenexp) {\r",
							"    console.log(\"Token is expired or missing. Fetching a new one.\");\r",
							"   // console.log(\"Current base_url_users:\", pm.environment.get(\"base_url_users\"));\r",
							"pm.sendRequest({\r",
							"        url: pm.environment.get(\"base_url_users\") + \"/login/\",\r",
							"        method: \"POST\",\r",
							"        header: {\r",
							"            \"Content-Type\": \"application/json\"\r",
							"        },\r",
							"        body: {\r",
							"            mode: \"raw\",\r",
							"            raw: JSON.stringify({\r",
							"                email: pm.environment.get(\"randomEmail\"),\r",
							"                password: pm.environment.get(\"randomPassword\")\r",
							"            })\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(\"Error fetching new access token:\", err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        // Parse the response and set the new access token\r",
							"        let response = res.json();\r",
							"        if (response.access_token) {\r",
							"            pm.environment.set(\"accessToken\", response.access_token);\r",
							"            console.log(\"New Access Token fetched and saved:\", response.access_token);\r",
							"        } else {\r",
							"            console.error(\"Failed to fetch new access token. Response:\", response);\r",
							"        }\r",
							"    });\r",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.environment.set(\"base_url_users\", \"http://localhost:8001\");\r",
					"pm.environment.set(\"base_url_products\", \"http://localhost:8002\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}